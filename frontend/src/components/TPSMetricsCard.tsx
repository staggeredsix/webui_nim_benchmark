import React from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { formatNumber } from '@/utils/format';
import { Gauge, ArrowUp, Zap } from 'lucide-react';

interface TPSMetricsCardProps {
  currentTPS: number;
  peakTPS: number;
  modelTPS?: number;
  historicalData: any[];
}

const TPSMetricsCard: React.FC<TPSMetricsCardProps> = ({ 
  currentTPS, 
  peakTPS, 
  modelTPS,
  historicalData 
}) => {
  return (
    <div className="bg-gray-800 rounded-lg p-4">
      <h3 className="text-sm font-medium mb-3 flex items-center">
        <Gauge className="w-5 h-5 mr-2 text-green-500" />
        Throughput Metrics
      </h3>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
        <div className="bg-gray-700 p-3 rounded-lg">
          <div className="text-sm text-gray-400">Current TPS</div>
          <div className="text-2xl font-semibold flex items-center">
            {formatNumber(currentTPS, 1)}
            <span className="text-sm ml-1">tokens/s</span>
          </div>
        </div>
        
        <div className="bg-gray-700 p-3 rounded-lg">
          <div className="text-sm text-gray-400">Peak TPS</div>
          <div className="text-2xl font-semibold flex items-center text-green-500">
            {formatNumber(peakTPS, 1)}
            <span className="text-sm ml-1">tokens/s</span>
            <ArrowUp className="w-4 h-4 ml-1" />
          </div>
        </div>
        
        {modelTPS !== undefined && (
          <div className="bg-gray-700 p-3 rounded-lg">
            <div className="text-sm text-gray-400">Model-only TPS</div>
            <div className="text-2xl font-semibold flex items-center text-blue-500">
              {formatNumber(modelTPS, 1)}
              <span className="text-sm ml-1">tokens/s</span>
              <Zap className="w-4 h-4 ml-1" />
            </div>
            <div className="text-xs text-gray-500">Pure model performance</div>
          </div>
        )}
      </div>
      
      <div className="h-48">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={historicalData}>
            <CartesianGrid strokeDasharray="3 3" opacity={0.2} />
            <XAxis 
              dataKey="timestamp"
              tick={{ fill: '#9CA3AF' }}
              tickFormatter={(val) => {
                const date = new Date(val);
                return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
              }}
            />
            <YAxis 
              yAxisId="left"
              tick={{ fill: '#9CA3AF' }}
              domain={[0, 'dataMax * 1.1']}
            />
            <Tooltip 
              contentStyle={{ backgroundColor: '#1F2937', border: 'none' }}
              labelFormatter={(val) => new Date(val).toLocaleString()}
            />
            <Legend />
            <Line 
              yAxisId="left"
              type="monotone" 
              dataKey="tokens_per_second" 
              name="Current TPS" 
              stroke="#10B981"
              strokeWidth={2}
              isAnimationActive={false}
              dot={false}
            />
            <Line 
              yAxisId="left"
              type="monotone" 
              dataKey="peak_tps" 
              name="Peak TPS" 
              stroke="#F59E0B"
              strokeWidth={2}
              isAnimationActive={false}
              dot={false}
              strokeDasharray="5 5"
            />
            {modelTPS !== undefined && (
              <Line 
                yAxisId="left"
                type="monotone" 
                dataKey="model_tokens_per_second" 
                name="Model-only TPS" 
                stroke="#60A5FA"
                strokeWidth={2}
                isAnimationActive={false}
                dot={false}
              />
            )}
          </LineChart>
        </ResponsiveContainer>
      </div>
      
      <div className="mt-3 text-xs text-gray-400">
        <p>
          <strong>Current TPS:</strong> Real-time tokens per second being generated
        </p>
        <p>
          <strong>Peak TPS:</strong> Maximum tokens per second measured
        </p>
        {modelTPS !== undefined && (
          <p>
            <strong>Model-only TPS:</strong> Tokens per second generated by the model without API overhead
          </p>
        )}
      </div>
    </div>
  );
};

export default TPSMetricsCard;
